[project]
name = "sofalite"
version = "0.2.2"
description = "SofaLite - SOFA Statistics the Python Library"
authors = [
    { name = "Grant Paton-Simpson", email = "grant@sofastatistics.com" }
]
dependencies = [
    "beautifulsoup4>=4.12.3",
    "jinja2>=3.1.3",
    "numpy>=1.26.4",
    "pandas>=2.2.2",
    "ruamel-yaml>=0.18.10",
]
readme = "README.md"
requires-python = ">= 3.11"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
managed = true
dev-dependencies = [
    "import-linter>=2.3",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/sofalite"]

## >>> lint-imports
## https://import-linter.readthedocs.io/en/stable/contract_types.html#layers

[tool.importlinter]
root_packages = [ "sofalite" ]

[[tool.importlinter.contracts]]
name = "Layered Design"
type = "layers"
layers = [
    "output",
    "stats_calc",
    "sql_extraction",
    "utils",
    "conf",
    "init_conf",
    "start",
]
containers = ["sofalite"]
exhaustive = false
exhaustive_ignores = []

## I want a simple narrative about layers where higher can access lower but never the other way around
## But, there are functions needed at a conf level, which I would like to be very low, which are also needed at higher levels
## Solution - put those functions at a pre-conf level (init_conf) and only allow conf to get access to init_conf.
## But, need a few execeptions where we allw some function from init_conf to be served up from higher-level places.
## So we have a few exceptions to the only conf can access init_conf rule. And only to serve them up as library code at a higher level from which client code will access them i.e. not dorectly from init_conf.
## An alternative would be to have some conf at a much higher-level.
## Is it worth having so much conf at the lowest level? Open question.
## Probably not - you still end up with needing some interfaces defined lower than where the functions they may need,
## e.g. to fulfil @properties, will naturally belong above in the layer hierarchy.
[[tool.importlinter.contracts]]
## want to pass these through to higher-level modules so they can be accessed from the logical place e.g. all stats calculation code together
name = "init_conf Hidden Above Conf"
type = "forbidden"
source_modules = [
    "sofalite.output",
    "sofalite.stats_calc",
    "sofalite.sql_extraction",
    "sofalite.utils",
]
forbidden_modules = [
    "sofalite.init_conf",
]
allow_indirect_imports = true
ignore_imports = [  ## not config but functions - needed in init_conf so conf can use these functions to create @property attributes on demand
    "sofalite.stats_calc.boxplot -> sofalite.init_conf.utils.boxplot",
    "sofalite.stats_calc.engine -> sofalite.init_conf.stats.engine",
    "sofalite.stats_calc.histogram -> sofalite.init_conf.utils.histogram",
    "sofalite.stats_calc.utils -> sofalite.init_conf.utils.stats",
    "sofalite.utils.maths -> sofalite.init_conf.utils.maths",
]

[[tool.importlinter.contracts]]
name = "init_conf Layered"
type = "layers"
layers = [
    "stats",
    "utils",
]
containers = ["sofalite.init_conf"]
exhaustive = false
exhaustive_ignores = []

[[tool.importlinter.contracts]]
name = "conf Layered"
type = "layers"
layers = [
    "charts | data | paths | style| tables",
    "misc | stats",
]
containers = ["sofalite.conf"]
exhaustive = false
exhaustive_ignores = []

[[tool.importlinter.contracts]]
name = "conf.charts Layered"
type = "layers"
layers = [
    "intermediate | misc",  ## specific use of output
    "output",
]
containers = ["sofalite.conf.charts"]
exhaustive = false
exhaustive_ignores = []

[[tool.importlinter.contracts]]
name = "output Layered"
type = "layers"
layers = [
    "charts | stats | tables",
    "styles",
]
containers = ["sofalite.output"]
exhaustive = false
exhaustive_ignores = []
